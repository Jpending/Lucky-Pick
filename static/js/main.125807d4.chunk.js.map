{"version":3,"sources":["logo.svg","MyNumbers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MyNumbers","props","numbers","map","number","key","App","state","currentNumber","myNumbers","generatedNums","Currentlyplaying","isLucky","currentGame","console","log","game","this","setState","includes","alert","className","src","logo","alt","name","type","onChange","e","handleCurrentNumber","currentTarget","value","onClick","handleAddNumber","length","handleGetLucky","handleSelectGame","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,qNCG5B,SAASC,EAAUC,GAEhC,OADoBA,EAAZC,QAGEC,KAAI,SAAAC,GAAM,OAAI,wBAAIC,IAAKD,EAAS,UAAWA,M,ICuExCE,E,4MAxEbC,MAAQ,CACNC,cAAe,KACfC,UAAW,GACXC,cAAe,GACfC,iBAAkB,GAClBC,SAAS,G,+DAGMC,GACfC,QAAQC,IAAIF,GACZ,IAAMG,EAAOH,EACbI,KAAKC,SAAS,CAAEP,iBAAkBK,M,uCAIlCF,QAAQC,IAAR,wBACAE,KAAKC,SAAS,CAAEN,SAAUK,KAAKV,MAAMK,Y,sCAGvBR,GACdU,QAAQC,IAAR,iBAAsBX,EAAtB,qBACIA,EACEa,KAAKV,MAAME,UAAUU,SAASf,GAChCgB,MAAM,kCAEDH,KAAKC,SAAS,CAAET,UAAU,GAAD,mBAAMQ,KAAKV,MAAME,WAAjB,CAA4BL,MACrDgB,MAAM,kC,0CAGGhB,GAClBU,QAAQC,IAAIX,GACZa,KAAKC,SAAS,CAAEV,cAAeJ,M,+BAKvB,IAAD,OACP,OACE,yBAAKiB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,2CAEF,6BACE,qEACA,2BAAOC,KAAK,UAAUC,KAAK,SAASC,SAAU,SAACC,GAAD,OAAO,EAAKC,oBAAoBD,EAAEE,cAAcC,UAC9F,4BAAQL,KAAK,SAASM,QAAS,WAAQ,EAAKC,gBAAgB,EAAK1B,MAAMC,iBAAvE,qBACCS,KAAKV,MAAME,UAAUyB,OAAS,GAAK,4BAAQR,KAAK,SAASM,QAAS,kBAAM,EAAKG,mBAA1C,cACZ,IAAvBlB,KAAKV,MAAMK,SAAoB,6BAAK,gDAAyB,4BAAI,kBAACZ,EAAD,CAAWE,QAASe,KAAKV,MAAME,cAGjG,kDAAwBQ,KAAKV,MAAMI,kBACnC,4BAAQgB,SAAU,SAACC,GAAD,OAAO,EAAKQ,iBAAiBR,EAAEE,cAAcC,SAC7D,4BAAQA,MAAM,IAAd,UACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,gBAAd,iBACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,aAAd,oB,GAjEMM,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.125807d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b955bca5.svg\";","import React from 'react';\r\n\r\n\r\nexport default function MyNumbers(props) {\r\n  const { numbers } = props;\r\n  return (\r\n\r\n    numbers.map(number => <li key={number + 'myNums'}>{number}</li>)\r\n  )\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MyNumbers from './MyNumbers';\n\nclass App extends React.Component {\n  state = {\n    currentNumber: null,\n    myNumbers: [],\n    generatedNums: [],\n    Currentlyplaying: '',\n    isLucky: false\n  }\n\n  handleSelectGame(currentGame) {\n    console.log(currentGame);\n    const game = currentGame;\n    this.setState({ Currentlyplaying: game })\n  }\n\n  handleGetLucky() {\n    console.log(`Prepare to get lucky`);\n    this.setState({ isLucky: !this.state.isLucky })\n  }\n\n  handleAddNumber(number) {\n    console.log(`adding ${number} to your numbers`);\n    if (number) {\n      if (this.state.myNumbers.includes(number)) {\n        alert('Can not add duplicate numbers!')\n      }\n      else { this.setState({ myNumbers: [...this.state.myNumbers, number] }) }\n    } else { alert('Can not add an empty number!') }\n  }\n\n  handleCurrentNumber(number) {\n    console.log(number);\n    this.setState({ currentNumber: number })\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1>Lucky Pick</h1>\n        </header>\n        <div>\n          <label >Put  a number you want to use here</label>\n          <input name=\"integer\" type=\"number\" onChange={(e) => this.handleCurrentNumber(e.currentTarget.value)} />\n          <button type=\"submit\" onClick={() => { this.handleAddNumber(this.state.currentNumber) }}>Add to My Numbers</button>\n          {this.state.myNumbers.length > 0 && <button type=\"submit\" onClick={() => this.handleGetLucky()}>Get Lucky</button>}\n          {this.state.isLucky === true && <div><h2>My Lucky Numbers</h2><ul><MyNumbers numbers={this.state.myNumbers} /></ul></div>}\n\n\n          <h3>Currently Playing: {this.state.Currentlyplaying}</h3>\n          <select onChange={(e) => this.handleSelectGame(e.currentTarget.value)} >\n            <option value=\"\">Select</option>\n            <option value=\"Pick 3\">Pick 3</option>\n            <option value=\"Pick 4\">Pick 4</option>\n            <option value=\"Jersey Cash 5\">Jersey Cash 5</option>\n            <option value=\"Pick 6\">Pick 6</option>\n            <option value=\"Quick Draw\">Quick Draw</option>\n            <option value=\"CASH POP\">CASH POP</option>\n            <option value=\"Powerball\">Powerball</option>\n            <option value=\"Mega Million\">Mega Millions</option>\n            <option value=\"CASH4LIFE\">CASH4LIFE</option>\n            <option value=\"5 Card Cash\">5 Card Cash</option>\n            <option value=\"FAST PLAY\">FAST PLAY</option>\n          </select>\n        </div>\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}